
i2c-test.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	74e0006f          	j	74e <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	000007d0          	.word	0x000007d0
   c:	000007ce          	.word	0x000007ce
	...
  30:	000007ce          	.word	0x000007ce
  34:	00000000          	.word	0x00000000
  38:	000007ce          	.word	0x000007ce
  3c:	00000000          	.word	0x00000000
  40:	000007ce          	.word	0x000007ce
  44:	000007ce          	.word	0x000007ce
  48:	000007ce          	.word	0x000007ce
  4c:	000007ce          	.word	0x000007ce
  50:	000007ce          	.word	0x000007ce
  54:	000007ce          	.word	0x000007ce
  58:	000007ce          	.word	0x000007ce
  5c:	000007ce          	.word	0x000007ce
  60:	000007ce          	.word	0x000007ce
  64:	000007ce          	.word	0x000007ce
  68:	000007ce          	.word	0x000007ce
  6c:	000007ce          	.word	0x000007ce
  70:	000007ce          	.word	0x000007ce
  74:	000007ce          	.word	0x000007ce
  78:	000007ce          	.word	0x000007ce
  7c:	000007ce          	.word	0x000007ce
  80:	000007ce          	.word	0x000007ce
  84:	000007ce          	.word	0x000007ce
  88:	000007ce          	.word	0x000007ce
  8c:	000007ce          	.word	0x000007ce
  90:	000007ce          	.word	0x000007ce
  94:	000007ce          	.word	0x000007ce
  98:	000007ce          	.word	0x000007ce
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
 12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
 12e:	4301                	li	t1,0
 130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
 134:	84b6                	mv	s1,a3
 136:	4305                	li	t1,1
 138:	a019                	j	13e <mini_pad+0x20>
 13a:	4301                	li	t1,0
 13c:	86a6                	mv	a3,s1
 13e:	40968433          	sub	s0,a3,s1
 142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
 146:	4401                	li	s0,0
 148:	8622                	mv	a2,s0
 14a:	853a                	mv	a0,a4
 14c:	c23e                	sw	a5,4(sp)
 14e:	c01a                	sw	t1,0(sp)
 150:	087000ef          	jal	9d6 <memset>
 154:	4302                	lw	t1,0(sp)
 156:	4792                	lw	a5,4(sp)
 158:	872a                	mv	a4,a0
 15a:	008506b3          	add	a3,a0,s0
 15e:	4601                	li	a2,0
 160:	40c485b3          	sub	a1,s1,a2
 164:	04b04263          	bgtz	a1,1a8 <mini_pad+0x8a>
 168:	0004d363          	bgez	s1,16e <mini_pad+0x50>
 16c:	4481                	li	s1,0
 16e:	009685b3          	add	a1,a3,s1
 172:	40e58533          	sub	a0,a1,a4
 176:	02030463          	beqz	t1,19e <mini_pad+0x80>
 17a:	02b77263          	bgeu	a4,a1,19e <mini_pad+0x80>
 17e:	02a00793          	li	a5,42
 182:	fef58fa3          	sb	a5,-1(a1)
 186:	fff58693          	addi	a3,a1,-1
 18a:	00d77a63          	bgeu	a4,a3,19e <mini_pad+0x80>
 18e:	fef58f23          	sb	a5,-2(a1)
 192:	ffe58693          	addi	a3,a1,-2
 196:	00d77463          	bgeu	a4,a3,19e <mini_pad+0x80>
 19a:	fef58ea3          	sb	a5,-3(a1)
 19e:	40c2                	lw	ra,16(sp)
 1a0:	4432                	lw	s0,12(sp)
 1a2:	44a2                	lw	s1,8(sp)
 1a4:	0151                	addi	sp,sp,20
 1a6:	8082                	ret
 1a8:	00c785b3          	add	a1,a5,a2
 1ac:	0005c503          	lbu	a0,0(a1)
 1b0:	00c685b3          	add	a1,a3,a2
 1b4:	0605                	addi	a2,a2,1
 1b6:	00a58023          	sb	a0,0(a1)
 1ba:	b75d                	j	160 <mini_pad+0x42>

000001bc <mini_itoa.part.0>:
 1bc:	1101                	addi	sp,sp,-32
 1be:	ce06                	sw	ra,28(sp)
 1c0:	cc22                	sw	s0,24(sp)
 1c2:	ca26                	sw	s1,20(sp)
 1c4:	c002                	sw	zero,0(sp)
 1c6:	832a                	mv	t1,a0
 1c8:	00055763          	bgez	a0,1d6 <mini_itoa.part.0+0x1a>
 1cc:	e689                	bnez	a3,1d6 <mini_itoa.part.0+0x1a>
 1ce:	4785                	li	a5,1
 1d0:	40a00333          	neg	t1,a0
 1d4:	c03e                	sw	a5,0(sp)
 1d6:	8a05                	andi	a2,a2,1
 1d8:	06100413          	li	s0,97
 1dc:	c219                	beqz	a2,1e2 <mini_itoa.part.0+0x26>
 1de:	04100413          	li	s0,65
 1e2:	84ba                	mv	s1,a4
 1e4:	1459                	addi	s0,s0,-10
 1e6:	851a                	mv	a0,t1
 1e8:	c83a                	sw	a4,16(sp)
 1ea:	c21a                	sw	t1,4(sp)
 1ec:	c62e                	sw	a1,12(sp)
 1ee:	c41a                	sw	t1,8(sp)
 1f0:	35d5                	jal	d4 <__umodsi3>
 1f2:	47a5                	li	a5,9
 1f4:	4322                	lw	t1,8(sp)
 1f6:	45b2                	lw	a1,12(sp)
 1f8:	4742                	lw	a4,16(sp)
 1fa:	0ff57693          	zext.b	a3,a0
 1fe:	06a7e163          	bltu	a5,a0,260 <mini_itoa.part.0+0xa4>
 202:	03068693          	addi	a3,a3,48
 206:	0ff6f693          	zext.b	a3,a3
 20a:	00148793          	addi	a5,s1,1
 20e:	00d48023          	sb	a3,0(s1)
 212:	851a                	mv	a0,t1
 214:	c83a                	sw	a4,16(sp)
 216:	c63e                	sw	a5,12(sp)
 218:	c42e                	sw	a1,8(sp)
 21a:	3579                	jal	a8 <__hidden___udivsi3>
 21c:	4692                	lw	a3,4(sp)
 21e:	45a2                	lw	a1,8(sp)
 220:	47b2                	lw	a5,12(sp)
 222:	4742                	lw	a4,16(sp)
 224:	832a                	mv	t1,a0
 226:	02b6fb63          	bgeu	a3,a1,25c <mini_itoa.part.0+0xa0>
 22a:	4682                	lw	a3,0(sp)
 22c:	c699                	beqz	a3,23a <mini_itoa.part.0+0x7e>
 22e:	02d00693          	li	a3,45
 232:	00d78023          	sb	a3,0(a5)
 236:	00248793          	addi	a5,s1,2
 23a:	40e78533          	sub	a0,a5,a4
 23e:	01f55693          	srli	a3,a0,0x1f
 242:	96aa                	add	a3,a3,a0
 244:	00078023          	sb	zero,0(a5)
 248:	8685                	srai	a3,a3,0x1
 24a:	4601                	li	a2,0
 24c:	17fd                	addi	a5,a5,-1
 24e:	00d64b63          	blt	a2,a3,264 <mini_itoa.part.0+0xa8>
 252:	40f2                	lw	ra,28(sp)
 254:	4462                	lw	s0,24(sp)
 256:	44d2                	lw	s1,20(sp)
 258:	6105                	addi	sp,sp,32
 25a:	8082                	ret
 25c:	84be                	mv	s1,a5
 25e:	b761                	j	1e6 <mini_itoa.part.0+0x2a>
 260:	96a2                	add	a3,a3,s0
 262:	b755                	j	206 <mini_itoa.part.0+0x4a>
 264:	00c705b3          	add	a1,a4,a2
 268:	0007c283          	lbu	t0,0(a5)
 26c:	0005c303          	lbu	t1,0(a1)
 270:	0605                	addi	a2,a2,1
 272:	00558023          	sb	t0,0(a1)
 276:	00678023          	sb	t1,0(a5)
 27a:	bfc9                	j	24c <mini_itoa.part.0+0x90>

0000027c <i2c_write.constprop.0>:
{
	i2c_err_t i2c_ret = I2C_OK;

	// Wait for the bus to become not busy - set state to I2C_ERR_TIMEOUT on failure
	int32_t timeout = I2C_TIMEOUT;
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 27c:	400057b7          	lui	a5,0x40005
i2c_err_t i2c_write(const uint8_t addr,		const uint8_t reg,
 280:	7d100693          	li	a3,2001
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 284:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 288:	0187d703          	lhu	a4,24(a5)
 28c:	8b09                	andi	a4,a4,2
 28e:	eb71                	bnez	a4,362 <i2c_write.constprop.0+0xe6>
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}

	if(i2c_ret == I2C_OK)
	{
		// Send a START Signal and wait for it to assert
		I2C1->CTLR1 |= I2C_CTLR1_START;
 290:	0007d703          	lhu	a4,0(a5)
	return (status & status_mask) == status_mask; 
 294:	000306b7          	lui	a3,0x30
 298:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.f09bf034+0x2dc1b>
		I2C1->CTLR1 |= I2C_CTLR1_START;
 29a:	10076713          	ori	a4,a4,256
 29e:	00e79023          	sh	a4,0(a5)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 2a2:	40005737          	lui	a4,0x40005
 2a6:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
 2aa:	01475603          	lhu	a2,20(a4)
 2ae:	01875783          	lhu	a5,24(a4)
 2b2:	07c2                	slli	a5,a5,0x10
 2b4:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
 2b6:	8ff5                	and	a5,a5,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
 2b8:	fed799e3          	bne	a5,a3,2aa <i2c_write.constprop.0+0x2e>

		// Send the Address and wait for it to finish transmitting
		timeout = I2C_TIMEOUT;
		I2C1->DATAR = (addr << 1) & 0xFE;
 2bc:	0d000793          	li	a5,208
 2c0:	00f71823          	sh	a5,16(a4)
	return (status & status_mask) == status_mask; 
 2c4:	000706b7          	lui	a3,0x70
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 2c8:	400057b7          	lui	a5,0x40005
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 2cc:	7d100613          	li	a2,2001
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 2d0:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
 2d4:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.f09bf034+0x6dc9c>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 2d8:	0147d303          	lhu	t1,20(a5)
 2dc:	0187d703          	lhu	a4,24(a5)
 2e0:	0742                	slli	a4,a4,0x10
 2e2:	00676733          	or	a4,a4,t1
	return (status & status_mask) == status_mask; 
 2e6:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 2e8:	0ad71663          	bne	a4,a3,394 <i2c_write.constprop.0+0x118>

	if(i2c_ret == I2C_OK)
	{
		// Send the Register Byte
		I2C1->DATAR = reg;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
 2ec:	40005737          	lui	a4,0x40005
		I2C1->DATAR = reg;
 2f0:	00079823          	sh	zero,16(a5)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
 2f4:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
 2f8:	01475783          	lhu	a5,20(a4)
 2fc:	0807f793          	andi	a5,a5,128
 300:	dfe5                	beqz	a5,2f8 <i2c_write.constprop.0+0x7c>
		// Write bytes
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// Write the byte and wait for it to finish transmitting
			while(!(I2C1->STAR1 & I2C_STAR1_TXE));
 302:	400057b7          	lui	a5,0x40005
 306:	4701                	li	a4,0
 308:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 30c:	0147d683          	lhu	a3,20(a5)
 310:	0806f693          	andi	a3,a3,128
 314:	dee5                	beqz	a3,30c <i2c_write.constprop.0+0x90>
			I2C1->DATAR = buf[cbyte];
 316:	00e506b3          	add	a3,a0,a4
 31a:	0006c683          	lbu	a3,0(a3)
 31e:	00d79823          	sh	a3,16(a5)
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
 322:	0147d683          	lhu	a3,20(a5)
 326:	1006f693          	andi	a3,a3,256
 32a:	c6f9                	beqz	a3,3f8 <i2c_write.constprop.0+0x17c>
 32c:	0147d703          	lhu	a4,20(a5)
 330:	66c1                	lui	a3,0x10
 332:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.f09bf034+0xdb19>
 336:	8f75                	and	a4,a4,a3
 338:	00e79a23          	sh	a4,20(a5)

			// Make sure no errors occured
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 33c:	4505                	li	a0,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 33e:	400056b7          	lui	a3,0x40005
	return (status & status_mask) == status_mask; 
 342:	00070737          	lui	a4,0x70
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 346:	40068693          	addi	a3,a3,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
 34a:	08470713          	addi	a4,a4,132 # 70084 <lib_i2c.c.f09bf034+0x6dc9e>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 34e:	0146d603          	lhu	a2,20(a3)
 352:	0186d783          	lhu	a5,24(a3)
 356:	07c2                	slli	a5,a5,0x10
 358:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
 35a:	8ff9                	and	a5,a5,a4

			++cbyte;
		}

		// Wait for the bus to finish transmitting
		while(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 35c:	fee799e3          	bne	a5,a4,34e <i2c_write.constprop.0+0xd2>
 360:	a00d                	j	382 <i2c_write.constprop.0+0x106>
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 362:	16fd                	addi	a3,a3,-1
 364:	f295                	bnez	a3,288 <i2c_write.constprop.0+0xc>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
 366:	0147d703          	lhu	a4,20(a5)
 36a:	10077713          	andi	a4,a4,256
 36e:	c715                	beqz	a4,39a <i2c_write.constprop.0+0x11e>
 370:	0147d703          	lhu	a4,20(a5)
 374:	66c1                	lui	a3,0x10
 376:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.f09bf034+0xdb19>
 37a:	8f75                	and	a4,a4,a3
 37c:	00e79a23          	sh	a4,20(a5)
	i2c_err_t i2c_err = i2c_error();
 380:	4505                	li	a0,1
	}

	// Send a STOP Condition, to aut-reset for the next operation
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
 382:	400057b7          	lui	a5,0x40005
 386:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>
 38a:	20076713          	ori	a4,a4,512
 38e:	40e79023          	sh	a4,1024(a5)

	return i2c_ret;
}
 392:	8082                	ret
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 394:	167d                	addi	a2,a2,-1
 396:	f229                	bnez	a2,2d8 <i2c_write.constprop.0+0x5c>
 398:	b7f9                	j	366 <i2c_write.constprop.0+0xea>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
 39a:	0147d703          	lhu	a4,20(a5)
 39e:	40077713          	andi	a4,a4,1024
 3a2:	cb19                	beqz	a4,3b8 <i2c_write.constprop.0+0x13c>
 3a4:	0147d703          	lhu	a4,20(a5)
 3a8:	66c1                	lui	a3,0x10
 3aa:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.f09bf034+0xd819>
 3ae:	8f75                	and	a4,a4,a3
 3b0:	00e79a23          	sh	a4,20(a5)
	i2c_err_t i2c_err = i2c_error();
 3b4:	4509                	li	a0,2
 3b6:	b7f1                	j	382 <i2c_write.constprop.0+0x106>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
 3b8:	0147d703          	lhu	a4,20(a5)
 3bc:	20077713          	andi	a4,a4,512
 3c0:	cb19                	beqz	a4,3d6 <i2c_write.constprop.0+0x15a>
 3c2:	0147d703          	lhu	a4,20(a5)
 3c6:	66c1                	lui	a3,0x10
 3c8:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.f09bf034+0xda19>
 3cc:	8f75                	and	a4,a4,a3
 3ce:	00e79a23          	sh	a4,20(a5)
	i2c_err_t i2c_err = i2c_error();
 3d2:	450d                	li	a0,3
 3d4:	b77d                	j	382 <i2c_write.constprop.0+0x106>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 3d6:	0147d703          	lhu	a4,20(a5)
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
 3da:	4515                	li	a0,5
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 3dc:	01471693          	slli	a3,a4,0x14
 3e0:	fa06d1e3          	bgez	a3,382 <i2c_write.constprop.0+0x106>
 3e4:	0147d703          	lhu	a4,20(a5)
 3e8:	76fd                	lui	a3,0xfffff
 3ea:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
 3ee:	8f75                	and	a4,a4,a3
 3f0:	00e79a23          	sh	a4,20(a5)
	i2c_err_t i2c_err = i2c_error();
 3f4:	4511                	li	a0,4
 3f6:	b771                	j	382 <i2c_write.constprop.0+0x106>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
 3f8:	0147d683          	lhu	a3,20(a5)
 3fc:	4006f693          	andi	a3,a3,1024
 400:	ca99                	beqz	a3,416 <i2c_write.constprop.0+0x19a>
 402:	0147d703          	lhu	a4,20(a5)
 406:	66c1                	lui	a3,0x10
 408:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.f09bf034+0xd819>
 40c:	8f75                	and	a4,a4,a3
 40e:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 412:	4509                	li	a0,2
 414:	b72d                	j	33e <i2c_write.constprop.0+0xc2>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
 416:	0147d683          	lhu	a3,20(a5)
 41a:	2006f693          	andi	a3,a3,512
 41e:	ca99                	beqz	a3,434 <i2c_write.constprop.0+0x1b8>
 420:	0147d703          	lhu	a4,20(a5)
 424:	66c1                	lui	a3,0x10
 426:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.f09bf034+0xda19>
 42a:	8f75                	and	a4,a4,a3
 42c:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 430:	450d                	li	a0,3
 432:	b731                	j	33e <i2c_write.constprop.0+0xc2>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 434:	0147d683          	lhu	a3,20(a5)
 438:	01469613          	slli	a2,a3,0x14
 43c:	00065c63          	bgez	a2,454 <i2c_write.constprop.0+0x1d8>
 440:	0147d703          	lhu	a4,20(a5)
 444:	76fd                	lui	a3,0xfffff
 446:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
 44a:	8f75                	and	a4,a4,a3
 44c:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 450:	4511                	li	a0,4
 452:	b5f5                	j	33e <i2c_write.constprop.0+0xc2>
		while(cbyte < len)
 454:	0705                	addi	a4,a4,1
 456:	0ff77693          	zext.b	a3,a4
 45a:	eab6e9e3          	bltu	a3,a1,30c <i2c_write.constprop.0+0x90>
 45e:	4501                	li	a0,0
 460:	bdf9                	j	33e <i2c_write.constprop.0+0xc2>

00000462 <i2c_read.constprop.0>:
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 462:	400057b7          	lui	a5,0x40005
i2c_err_t i2c_read(const uint8_t addr,		const uint8_t reg,
 466:	7d100693          	li	a3,2001
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 46a:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 46e:	0187d703          	lhu	a4,24(a5)
 472:	8b09                	andi	a4,a4,2
 474:	12071d63          	bnez	a4,5ae <i2c_read.constprop.0+0x14c>
		I2C1->CTLR1 |= I2C_CTLR1_START;
 478:	0007d703          	lhu	a4,0(a5)
	return (status & status_mask) == status_mask; 
 47c:	000306b7          	lui	a3,0x30
 480:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.f09bf034+0x2dc1b>
		I2C1->CTLR1 |= I2C_CTLR1_START;
 482:	10076713          	ori	a4,a4,256
 486:	00e79023          	sh	a4,0(a5)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 48a:	40005737          	lui	a4,0x40005
 48e:	40070713          	addi	a4,a4,1024 # 40005400 <_eusrstack+0x20004c00>
 492:	01475603          	lhu	a2,20(a4)
 496:	01875783          	lhu	a5,24(a4)
 49a:	07c2                	slli	a5,a5,0x10
 49c:	8fd1                	or	a5,a5,a2
	return (status & status_mask) == status_mask; 
 49e:	8ff5                	and	a5,a5,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
 4a0:	fed799e3          	bne	a5,a3,492 <i2c_read.constprop.0+0x30>
		I2C1->DATAR = (addr << 1) & 0xFE;
 4a4:	0d000793          	li	a5,208
 4a8:	00f71823          	sh	a5,16(a4)
	return (status & status_mask) == status_mask; 
 4ac:	000706b7          	lui	a3,0x70
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 4b0:	400057b7          	lui	a5,0x40005
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 4b4:	7d100613          	li	a2,2001
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 4b8:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
 4bc:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.f09bf034+0x6dc9c>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 4c0:	0147d303          	lhu	t1,20(a5)
 4c4:	0187d703          	lhu	a4,24(a5)
 4c8:	0742                	slli	a4,a4,0x10
 4ca:	00676733          	or	a4,a4,t1
	return (status & status_mask) == status_mask; 
 4ce:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 4d0:	12d71863          	bne	a4,a3,600 <i2c_read.constprop.0+0x19e>
		I2C1->DATAR = reg;
 4d4:	00079823          	sh	zero,16(a5)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
 4d8:	400057b7          	lui	a5,0x40005
 4dc:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 4e0:	0147d703          	lhu	a4,20(a5)
 4e4:	08077713          	andi	a4,a4,128
 4e8:	df65                	beqz	a4,4e0 <i2c_read.constprop.0+0x7e>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
 4ea:	4705                	li	a4,1
 4ec:	00e58863          	beq	a1,a4,4fc <i2c_read.constprop.0+0x9a>
 4f0:	0007d703          	lhu	a4,0(a5)
 4f4:	40076713          	ori	a4,a4,1024
 4f8:	00e79023          	sh	a4,0(a5)
		I2C1->CTLR1 |= I2C_CTLR1_START;
 4fc:	400057b7          	lui	a5,0x40005
 500:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
 504:	000306b7          	lui	a3,0x30
		I2C1->CTLR1 |= I2C_CTLR1_START;
 508:	40078793          	addi	a5,a5,1024
 50c:	10076713          	ori	a4,a4,256
 510:	00e79023          	sh	a4,0(a5)
	return (status & status_mask) == status_mask; 
 514:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.f09bf034+0x2dc1b>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 516:	0147d603          	lhu	a2,20(a5)
 51a:	0187d703          	lhu	a4,24(a5)
 51e:	0742                	slli	a4,a4,0x10
 520:	8f51                	or	a4,a4,a2
	return (status & status_mask) == status_mask; 
 522:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
 524:	fed719e3          	bne	a4,a3,516 <i2c_read.constprop.0+0xb4>
		I2C1->DATAR = (addr << 1) | 0x01;
 528:	0d100713          	li	a4,209
 52c:	00e79823          	sh	a4,16(a5)
	return (status & status_mask) == status_mask; 
 530:	000306b7          	lui	a3,0x30
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 534:	400057b7          	lui	a5,0x40005
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 538:	7d100613          	li	a2,2001
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 53c:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
	return (status & status_mask) == status_mask; 
 540:	0689                	addi	a3,a3,2 # 30002 <lib_i2c.c.f09bf034+0x2dc1c>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 542:	0147d303          	lhu	t1,20(a5)
 546:	0187d703          	lhu	a4,24(a5)
 54a:	0742                	slli	a4,a4,0x10
 54c:	00676733          	or	a4,a4,t1
	return (status & status_mask) == status_mask; 
 550:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 552:	0ad71b63          	bne	a4,a3,608 <i2c_read.constprop.0+0x1a6>
			while(!(I2C1->STAR1 & I2C_STAR1_RXNE));
 556:	400057b7          	lui	a5,0x40005
 55a:	4701                	li	a4,0
 55c:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20004c00>
 560:	0147d683          	lhu	a3,20(a5)
 564:	0406f693          	andi	a3,a3,64
 568:	dee5                	beqz	a3,560 <i2c_read.constprop.0+0xfe>
			buf[cbyte] = I2C1->DATAR;
 56a:	0107d603          	lhu	a2,16(a5)
 56e:	00e506b3          	add	a3,a0,a4
 572:	00c68023          	sb	a2,0(a3)
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
 576:	0147d683          	lhu	a3,20(a5)
 57a:	1006f693          	andi	a3,a3,256
 57e:	e2a1                	bnez	a3,5be <i2c_read.constprop.0+0x15c>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
 580:	0147d683          	lhu	a3,20(a5)
 584:	4006f693          	andi	a3,a3,1024
 588:	eab1                	bnez	a3,5dc <i2c_read.constprop.0+0x17a>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
 58a:	0147d683          	lhu	a3,20(a5)
 58e:	2006f693          	andi	a3,a3,512
 592:	e2d9                	bnez	a3,618 <i2c_read.constprop.0+0x1b6>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 594:	0147d683          	lhu	a3,20(a5)
 598:	01469613          	slli	a2,a3,0x14
 59c:	08064f63          	bltz	a2,63a <i2c_read.constprop.0+0x1d8>
		while(cbyte < len)
 5a0:	0705                	addi	a4,a4,1
 5a2:	0ff77693          	zext.b	a3,a4
 5a6:	fab6ede3          	bltu	a3,a1,560 <i2c_read.constprop.0+0xfe>
 5aa:	4501                	li	a0,0
 5ac:	a089                	j	5ee <i2c_read.constprop.0+0x18c>
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 5ae:	16fd                	addi	a3,a3,-1
 5b0:	ea069fe3          	bnez	a3,46e <i2c_read.constprop.0+0xc>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
 5b4:	0147d703          	lhu	a4,20(a5)
 5b8:	10077713          	andi	a4,a4,256
 5bc:	cb19                	beqz	a4,5d2 <i2c_read.constprop.0+0x170>
 5be:	0147d703          	lhu	a4,20(a5)
 5c2:	66c1                	lui	a3,0x10
 5c4:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.f09bf034+0xdb19>
 5c8:	8f75                	and	a4,a4,a3
 5ca:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 5ce:	4505                	li	a0,1
 5d0:	a839                	j	5ee <i2c_read.constprop.0+0x18c>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
 5d2:	0147d703          	lhu	a4,20(a5)
 5d6:	40077713          	andi	a4,a4,1024
 5da:	cb15                	beqz	a4,60e <i2c_read.constprop.0+0x1ac>
 5dc:	0147d703          	lhu	a4,20(a5)
 5e0:	66c1                	lui	a3,0x10
 5e2:	bff68693          	addi	a3,a3,-1025 # fbff <lib_i2c.c.f09bf034+0xd819>
 5e6:	8f75                	and	a4,a4,a3
 5e8:	00e79a23          	sh	a4,20(a5)
	i2c_err_t i2c_err = i2c_error();
 5ec:	4509                	li	a0,2
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
 5ee:	400057b7          	lui	a5,0x40005
 5f2:	4007d703          	lhu	a4,1024(a5) # 40005400 <_eusrstack+0x20004c00>
 5f6:	20076713          	ori	a4,a4,512
 5fa:	40e79023          	sh	a4,1024(a5)
}
 5fe:	8082                	ret
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 600:	167d                	addi	a2,a2,-1
 602:	ea061fe3          	bnez	a2,4c0 <i2c_read.constprop.0+0x5e>
 606:	b77d                	j	5b4 <i2c_read.constprop.0+0x152>
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 608:	167d                	addi	a2,a2,-1
 60a:	fe05                	bnez	a2,542 <i2c_read.constprop.0+0xe0>
 60c:	b765                	j	5b4 <i2c_read.constprop.0+0x152>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
 60e:	0147d703          	lhu	a4,20(a5)
 612:	20077713          	andi	a4,a4,512
 616:	cb19                	beqz	a4,62c <i2c_read.constprop.0+0x1ca>
 618:	0147d703          	lhu	a4,20(a5)
 61c:	66c1                	lui	a3,0x10
 61e:	dff68693          	addi	a3,a3,-513 # fdff <lib_i2c.c.f09bf034+0xda19>
 622:	8f75                	and	a4,a4,a3
 624:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 628:	450d                	li	a0,3
 62a:	b7d1                	j	5ee <i2c_read.constprop.0+0x18c>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 62c:	0147d703          	lhu	a4,20(a5)
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
 630:	4515                	li	a0,5
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 632:	01471693          	slli	a3,a4,0x14
 636:	fa06dce3          	bgez	a3,5ee <i2c_read.constprop.0+0x18c>
 63a:	0147d703          	lhu	a4,20(a5)
 63e:	76fd                	lui	a3,0xfffff
 640:	7ff68693          	addi	a3,a3,2047 # fffff7ff <_eusrstack+0xdfffefff>
 644:	8f75                	and	a4,a4,a3
 646:	00e79a23          	sh	a4,20(a5)
			if((i2c_ret = i2c_error()) != I2C_OK) break;
 64a:	4511                	li	a0,4
 64c:	b74d                	j	5ee <i2c_read.constprop.0+0x18c>

0000064e <internal_handle_input.constprop.0>:
 64e:	e00007b7          	lui	a5,0xe0000
 652:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 656:	439c                	lw	a5,0(a5)
 658:	8082                	ret

0000065a <_write.constprop.0>:
 65a:	1101                	addi	sp,sp,-32
 65c:	cc22                	sw	s0,24(sp)
 65e:	ce06                	sw	ra,28(sp)
 660:	ca26                	sw	s1,20(sp)
 662:	c02a                	sw	a0,0(sp)
 664:	c802                	sw	zero,16(sp)
 666:	842e                	mv	s0,a1
 668:	e1f9                	bnez	a1,72e <_write.constprop.0+0xd4>
 66a:	e00007b7          	lui	a5,0xe0000
 66e:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 672:	439c                	lw	a5,0(a5)
 674:	c789                	beqz	a5,67e <_write.constprop.0+0x24>
 676:	0807f793          	andi	a5,a5,128
 67a:	e391                	bnez	a5,67e <_write.constprop.0+0x24>
 67c:	3fc9                	jal	64e <internal_handle_input.constprop.0>
 67e:	40f2                	lw	ra,28(sp)
 680:	8522                	mv	a0,s0
 682:	4462                	lw	s0,24(sp)
 684:	44d2                	lw	s1,20(sp)
 686:	6105                	addi	sp,sp,32
 688:	8082                	ret
 68a:	409406b3          	sub	a3,s0,s1
 68e:	461d                	li	a2,7
 690:	8736                	mv	a4,a3
 692:	00d65363          	bge	a2,a3,698 <_write.constprop.0+0x3e>
 696:	471d                	li	a4,7
 698:	00027637          	lui	a2,0x27
 69c:	10160613          	addi	a2,a2,257 # 27101 <lib_i2c.c.f09bf034+0x24d1b>
 6a0:	00032583          	lw	a1,0(t1)
 6a4:	0805f513          	andi	a0,a1,128
 6a8:	ed3d                	bnez	a0,726 <_write.constprop.0+0xcc>
 6aa:	c981                	beqz	a1,6ba <_write.constprop.0+0x60>
 6ac:	c61a                	sw	t1,12(sp)
 6ae:	c43a                	sw	a4,8(sp)
 6b0:	c236                	sw	a3,4(sp)
 6b2:	3f71                	jal	64e <internal_handle_input.constprop.0>
 6b4:	4332                	lw	t1,12(sp)
 6b6:	4722                	lw	a4,8(sp)
 6b8:	4692                	lw	a3,4(sp)
 6ba:	0036a693          	slti	a3,a3,3
 6be:	4601                	li	a2,0
 6c0:	e299                	bnez	a3,6c6 <_write.constprop.0+0x6c>
 6c2:	ffd70613          	addi	a2,a4,-3
 6c6:	4782                	lw	a5,0(sp)
 6c8:	00348593          	addi	a1,s1,3
 6cc:	0808                	addi	a0,sp,16
 6ce:	95be                	add	a1,a1,a5
 6d0:	c41a                	sw	t1,8(sp)
 6d2:	c23a                	sw	a4,4(sp)
 6d4:	2e11                	jal	9e8 <memcpy>
 6d6:	4642                	lw	a2,16(sp)
 6d8:	4782                	lw	a5,0(sp)
 6da:	e00006b7          	lui	a3,0xe0000
 6de:	4322                	lw	t1,8(sp)
 6e0:	4712                	lw	a4,4(sp)
 6e2:	0f868693          	addi	a3,a3,248 # e00000f8 <_eusrstack+0xbffff8f8>
 6e6:	c290                	sw	a2,0(a3)
 6e8:	458d                	li	a1,3
 6ea:	00978633          	add	a2,a5,s1
 6ee:	4681                	li	a3,0
 6f0:	00064283          	lbu	t0,0(a2)
 6f4:	0685                	addi	a3,a3,1
 6f6:	01068793          	addi	a5,a3,16
 6fa:	00278533          	add	a0,a5,sp
 6fe:	00550023          	sb	t0,0(a0)
 702:	00d70563          	beq	a4,a3,70c <_write.constprop.0+0xb2>
 706:	0605                	addi	a2,a2,1
 708:	feb694e3          	bne	a3,a1,6f0 <_write.constprop.0+0x96>
 70c:	00470693          	addi	a3,a4,4
 710:	f806e693          	ori	a3,a3,-128
 714:	00d10823          	sb	a3,16(sp)
 718:	46c2                	lw	a3,16(sp)
 71a:	94ba                	add	s1,s1,a4
 71c:	00d32023          	sw	a3,0(t1)
 720:	f684c5e3          	blt	s1,s0,68a <_write.constprop.0+0x30>
 724:	bfa9                	j	67e <_write.constprop.0+0x24>
 726:	167d                	addi	a2,a2,-1
 728:	fe25                	bnez	a2,6a0 <_write.constprop.0+0x46>
 72a:	8426                	mv	s0,s1
 72c:	bf89                	j	67e <_write.constprop.0+0x24>
 72e:	e0000337          	lui	t1,0xe0000
 732:	4481                	li	s1,0
 734:	0f430313          	addi	t1,t1,244 # e00000f4 <_eusrstack+0xbffff8f4>
 738:	b7e5                	j	720 <_write.constprop.0+0xc6>

0000073a <__puts_uart>:
 73a:	1151                	addi	sp,sp,-12
 73c:	c222                	sw	s0,4(sp)
 73e:	c406                	sw	ra,8(sp)
 740:	842e                	mv	s0,a1
 742:	3f21                	jal	65a <_write.constprop.0>
 744:	40a2                	lw	ra,8(sp)
 746:	8522                	mv	a0,s0
 748:	4412                	lw	s0,4(sp)
 74a:	0131                	addi	sp,sp,12
 74c:	8082                	ret

0000074e <handle_reset>:
 74e:	20000197          	auipc	gp,0x20000
 752:	0b218193          	addi	gp,gp,178 # 20000800 <_eusrstack>
 756:	00018113          	mv	sp,gp
 75a:	08000513          	li	a0,128
 75e:	30051073          	csrw	mstatus,a0
 762:	468d                	li	a3,3
 764:	00000517          	auipc	a0,0x0
 768:	89c50513          	addi	a0,a0,-1892 # 0 <InterruptVector>
 76c:	8d55                	or	a0,a0,a3
 76e:	30551073          	csrw	mtvec,a0
 772:	20000517          	auipc	a0,0x20000
 776:	88e50513          	addi	a0,a0,-1906 # 20000000 <_data_vma>
 77a:	20000597          	auipc	a1,0x20000
 77e:	88658593          	addi	a1,a1,-1914 # 20000000 <_data_vma>
 782:	4601                	li	a2,0
 784:	00b55663          	bge	a0,a1,790 <handle_reset+0x42>
 788:	c110                	sw	a2,0(a0)
 78a:	0511                	addi	a0,a0,4
 78c:	feb54ee3          	blt	a0,a1,788 <handle_reset+0x3a>
 790:	00000517          	auipc	a0,0x0
 794:	64c50513          	addi	a0,a0,1612 # ddc <_data_lma>
 798:	20000597          	auipc	a1,0x20000
 79c:	86858593          	addi	a1,a1,-1944 # 20000000 <_data_vma>
 7a0:	20000617          	auipc	a2,0x20000
 7a4:	86060613          	addi	a2,a2,-1952 # 20000000 <_data_vma>
 7a8:	00c58863          	beq	a1,a2,7b8 <handle_reset+0x6a>
 7ac:	4114                	lw	a3,0(a0)
 7ae:	c194                	sw	a3,0(a1)
 7b0:	0511                	addi	a0,a0,4
 7b2:	0591                	addi	a1,a1,4
 7b4:	fec59ae3          	bne	a1,a2,7a8 <handle_reset+0x5a>
 7b8:	e000f7b7          	lui	a5,0xe000f
 7bc:	4705                	li	a4,1
 7be:	c398                	sw	a4,0(a5)
 7c0:	6785                	lui	a5,0x1
 7c2:	a9278793          	addi	a5,a5,-1390 # a92 <main>
 7c6:	34179073          	csrw	mepc,a5
 7ca:	30200073          	mret

000007ce <ADC1_IRQHandler>:
 7ce:	a001                	j	7ce <ADC1_IRQHandler>

000007d0 <NMI_Handler>:
 7d0:	40021737          	lui	a4,0x40021
 7d4:	471c                	lw	a5,8(a4)
 7d6:	008006b7          	lui	a3,0x800
 7da:	8fd5                	or	a5,a5,a3
 7dc:	c71c                	sw	a5,8(a4)

000007de <strlen>:
 7de:	87aa                	mv	a5,a0
 7e0:	0007c703          	lbu	a4,0(a5)
 7e4:	e701                	bnez	a4,7ec <strlen+0xe>
 7e6:	40a78533          	sub	a0,a5,a0
 7ea:	8082                	ret
 7ec:	0785                	addi	a5,a5,1
 7ee:	bfcd                	j	7e0 <strlen+0x2>

000007f0 <mini_vpprintf>:
 7f0:	fa410113          	addi	sp,sp,-92
 7f4:	caa2                	sw	s0,84(sp)
 7f6:	c8a6                	sw	s1,80(sp)
 7f8:	cc86                	sw	ra,88(sp)
 7fa:	c02a                	sw	a0,0(sp)
 7fc:	c22e                	sw	a1,4(sp)
 7fe:	8432                	mv	s0,a2
 800:	84b6                	mv	s1,a3
 802:	ca02                	sw	zero,20(sp)
 804:	00044783          	lbu	a5,0(s0)
 808:	00140693          	addi	a3,s0,1
 80c:	00f10fa3          	sb	a5,31(sp)
 810:	eb81                	bnez	a5,820 <mini_vpprintf+0x30>
 812:	40e6                	lw	ra,88(sp)
 814:	4456                	lw	s0,84(sp)
 816:	4552                	lw	a0,20(sp)
 818:	44c6                	lw	s1,80(sp)
 81a:	05c10113          	addi	sp,sp,92
 81e:	8082                	ret
 820:	c636                	sw	a3,12(sp)
 822:	02500713          	li	a4,37
 826:	02e78063          	beq	a5,a4,846 <mini_vpprintf+0x56>
 82a:	4612                	lw	a2,4(sp)
 82c:	4782                	lw	a5,0(sp)
 82e:	4585                	li	a1,1
 830:	01f10513          	addi	a0,sp,31
 834:	9782                	jalr	a5
 836:	46b2                	lw	a3,12(sp)
 838:	c426                	sw	s1,8(sp)
 83a:	8436                	mv	s0,a3
 83c:	47d2                	lw	a5,20(sp)
 83e:	44a2                	lw	s1,8(sp)
 840:	97aa                	add	a5,a5,a0
 842:	ca3e                	sw	a5,20(sp)
 844:	b7c1                	j	804 <mini_vpprintf+0x14>
 846:	00144703          	lbu	a4,1(s0)
 84a:	03000613          	li	a2,48
 84e:	03000693          	li	a3,48
 852:	00e10fa3          	sb	a4,31(sp)
 856:	c632                	sw	a2,12(sp)
 858:	00240793          	addi	a5,s0,2
 85c:	08d71263          	bne	a4,a3,8e0 <mini_vpprintf+0xf0>
 860:	843e                	mv	s0,a5
 862:	4681                	li	a3,0
 864:	4781                	li	a5,0
 866:	45a5                	li	a1,9
 868:	a811                	j	87c <mini_vpprintf+0x8c>
 86a:	00279713          	slli	a4,a5,0x2
 86e:	0405                	addi	s0,s0,1
 870:	97ba                	add	a5,a5,a4
 872:	fff44703          	lbu	a4,-1(s0)
 876:	0786                	slli	a5,a5,0x1
 878:	97b2                	add	a5,a5,a2
 87a:	4685                	li	a3,1
 87c:	fd070613          	addi	a2,a4,-48 # 40020fd0 <_eusrstack+0x200207d0>
 880:	0ff67513          	zext.b	a0,a2
 884:	fea5f3e3          	bgeu	a1,a0,86a <mini_vpprintf+0x7a>
 888:	c299                	beqz	a3,88e <mini_vpprintf+0x9e>
 88a:	00e10fa3          	sb	a4,31(sp)
 88e:	c83e                	sw	a5,16(sp)
 890:	46e1                	li	a3,24
 892:	00f6d363          	bge	a3,a5,898 <mini_vpprintf+0xa8>
 896:	c836                	sw	a3,16(sp)
 898:	06c00613          	li	a2,108
 89c:	4681                	li	a3,0
 89e:	00c71863          	bne	a4,a2,8ae <mini_vpprintf+0xbe>
 8a2:	00044703          	lbu	a4,0(s0)
 8a6:	4685                	li	a3,1
 8a8:	0405                	addi	s0,s0,1
 8aa:	00e10fa3          	sb	a4,31(sp)
 8ae:	01f14603          	lbu	a2,31(sp)
 8b2:	06400713          	li	a4,100
 8b6:	06e60563          	beq	a2,a4,920 <mini_vpprintf+0x130>
 8ba:	02c76763          	bltu	a4,a2,8e8 <mini_vpprintf+0xf8>
 8be:	05800793          	li	a5,88
 8c2:	0af60163          	beq	a2,a5,964 <mini_vpprintf+0x174>
 8c6:	06300793          	li	a5,99
 8ca:	0af60e63          	beq	a2,a5,986 <mini_vpprintf+0x196>
 8ce:	d231                	beqz	a2,812 <mini_vpprintf+0x22>
 8d0:	4612                	lw	a2,4(sp)
 8d2:	4782                	lw	a5,0(sp)
 8d4:	4585                	li	a1,1
 8d6:	01f10513          	addi	a0,sp,31
 8da:	9782                	jalr	a5
 8dc:	c426                	sw	s1,8(sp)
 8de:	bfb9                	j	83c <mini_vpprintf+0x4c>
 8e0:	02000693          	li	a3,32
 8e4:	c636                	sw	a3,12(sp)
 8e6:	bfad                	j	860 <mini_vpprintf+0x70>
 8e8:	07500713          	li	a4,117
 8ec:	02e60a63          	beq	a2,a4,920 <mini_vpprintf+0x130>
 8f0:	07800713          	li	a4,120
 8f4:	06e60863          	beq	a2,a4,964 <mini_vpprintf+0x174>
 8f8:	07300713          	li	a4,115
 8fc:	fce61ae3          	bne	a2,a4,8d0 <mini_vpprintf+0xe0>
 900:	cc3e                	sw	a5,24(sp)
 902:	00448793          	addi	a5,s1,4
 906:	4084                	lw	s1,0(s1)
 908:	c43e                	sw	a5,8(sp)
 90a:	8526                	mv	a0,s1
 90c:	3dc9                	jal	7de <strlen>
 90e:	47e2                	lw	a5,24(sp)
 910:	85aa                	mv	a1,a0
 912:	08f05763          	blez	a5,9a0 <mini_vpprintf+0x1b0>
 916:	46c2                	lw	a3,16(sp)
 918:	4632                	lw	a2,12(sp)
 91a:	1838                	addi	a4,sp,56
 91c:	8526                	mv	a0,s1
 91e:	a01d                	j	944 <mini_vpprintf+0x154>
 920:	00448793          	addi	a5,s1,4
 924:	c43e                	sw	a5,8(sp)
 926:	c69d                	beqz	a3,954 <mini_vpprintf+0x164>
 928:	f8b60613          	addi	a2,a2,-117
 92c:	1018                	addi	a4,sp,32
 92e:	00163693          	seqz	a3,a2
 932:	4088                	lw	a0,0(s1)
 934:	4601                	li	a2,0
 936:	45a9                	li	a1,10
 938:	3051                	jal	1bc <mini_itoa.part.0>
 93a:	46c2                	lw	a3,16(sp)
 93c:	4632                	lw	a2,12(sp)
 93e:	1838                	addi	a4,sp,56
 940:	85aa                	mv	a1,a0
 942:	1008                	addi	a0,sp,32
 944:	fdaff0ef          	jal	11e <mini_pad>
 948:	4612                	lw	a2,4(sp)
 94a:	85aa                	mv	a1,a0
 94c:	1828                	addi	a0,sp,56
 94e:	4782                	lw	a5,0(sp)
 950:	9782                	jalr	a5
 952:	b5ed                	j	83c <mini_vpprintf+0x4c>
 954:	07500793          	li	a5,117
 958:	1018                	addi	a4,sp,32
 95a:	4685                	li	a3,1
 95c:	fcf60be3          	beq	a2,a5,932 <mini_vpprintf+0x142>
 960:	4681                	li	a3,0
 962:	bfc1                	j	932 <mini_vpprintf+0x142>
 964:	4088                	lw	a0,0(s1)
 966:	fa860613          	addi	a2,a2,-88
 96a:	00448793          	addi	a5,s1,4
 96e:	1018                	addi	a4,sp,32
 970:	4685                	li	a3,1
 972:	00163613          	seqz	a2,a2
 976:	45c1                	li	a1,16
 978:	c43e                	sw	a5,8(sp)
 97a:	3089                	jal	1bc <mini_itoa.part.0>
 97c:	46c2                	lw	a3,16(sp)
 97e:	4632                	lw	a2,12(sp)
 980:	85aa                	mv	a1,a0
 982:	1838                	addi	a4,sp,56
 984:	bf7d                	j	942 <mini_vpprintf+0x152>
 986:	00448793          	addi	a5,s1,4
 98a:	c43e                	sw	a5,8(sp)
 98c:	409c                	lw	a5,0(s1)
 98e:	46c2                	lw	a3,16(sp)
 990:	4632                	lw	a2,12(sp)
 992:	00f10fa3          	sb	a5,31(sp)
 996:	1838                	addi	a4,sp,56
 998:	4585                	li	a1,1
 99a:	01f10513          	addi	a0,sp,31
 99e:	b75d                	j	944 <mini_vpprintf+0x154>
 9a0:	4612                	lw	a2,4(sp)
 9a2:	8526                	mv	a0,s1
 9a4:	b76d                	j	94e <mini_vpprintf+0x15e>

000009a6 <printf>:
 9a6:	fdc10113          	addi	sp,sp,-36
 9aa:	ca32                	sw	a2,20(sp)
 9ac:	862a                	mv	a2,a0
 9ae:	c82e                	sw	a1,16(sp)
 9b0:	cc36                	sw	a3,24(sp)
 9b2:	4581                	li	a1,0
 9b4:	0814                	addi	a3,sp,16
 9b6:	73a00513          	li	a0,1850
 9ba:	c606                	sw	ra,12(sp)
 9bc:	ce3a                	sw	a4,28(sp)
 9be:	d03e                	sw	a5,32(sp)
 9c0:	c036                	sw	a3,0(sp)
 9c2:	353d                	jal	7f0 <mini_vpprintf>
 9c4:	40b2                	lw	ra,12(sp)
 9c6:	02410113          	addi	sp,sp,36
 9ca:	8082                	ret

000009cc <i2c_scan_callback>:

#define I2C_ADDR 0x68

// I2C Scan Callback example function. Prints the address which responded
void i2c_scan_callback(const uint8_t addr)
{
 9cc:	85aa                	mv	a1,a0
	printf("Address: 0x%02X Responded.\n", addr);
 9ce:	6505                	lui	a0,0x1
 9d0:	d2450513          	addi	a0,a0,-732 # d24 <main+0x292>
 9d4:	bfc9                	j	9a6 <printf>

000009d6 <memset>:
 9d6:	962a                	add	a2,a2,a0
 9d8:	87aa                	mv	a5,a0
 9da:	00c79363          	bne	a5,a2,9e0 <memset+0xa>
 9de:	8082                	ret
 9e0:	00b78023          	sb	a1,0(a5)
 9e4:	0785                	addi	a5,a5,1
 9e6:	bfd5                	j	9da <memset+0x4>

000009e8 <memcpy>:
 9e8:	4781                	li	a5,0
 9ea:	00f61363          	bne	a2,a5,9f0 <memcpy+0x8>
 9ee:	8082                	ret
 9f0:	00f58733          	add	a4,a1,a5
 9f4:	00074683          	lbu	a3,0(a4)
 9f8:	00f50733          	add	a4,a0,a5
 9fc:	0785                	addi	a5,a5,1
 9fe:	00d70023          	sb	a3,0(a4)
 a02:	b7e5                	j	9ea <memcpy+0x2>

00000a04 <puts>:
 a04:	1151                	addi	sp,sp,-12
 a06:	c406                	sw	ra,8(sp)
 a08:	c222                	sw	s0,4(sp)
 a0a:	c026                	sw	s1,0(sp)
 a0c:	84aa                	mv	s1,a0
 a0e:	3bc1                	jal	7de <strlen>
 a10:	842a                	mv	s0,a0
 a12:	85aa                	mv	a1,a0
 a14:	8526                	mv	a0,s1
 a16:	3191                	jal	65a <_write.constprop.0>
 a18:	6505                	lui	a0,0x1
 a1a:	4585                	li	a1,1
 a1c:	d4050513          	addi	a0,a0,-704 # d40 <main+0x2ae>
 a20:	392d                	jal	65a <_write.constprop.0>
 a22:	40a2                	lw	ra,8(sp)
 a24:	00140513          	addi	a0,s0,1
 a28:	4412                	lw	s0,4(sp)
 a2a:	4482                	lw	s1,0(sp)
 a2c:	0131                	addi	sp,sp,12
 a2e:	8082                	ret

00000a30 <SystemInit>:
 a30:	400227b7          	lui	a5,0x40022
 a34:	4705                	li	a4,1
 a36:	c398                	sw	a4,0(a5)
 a38:	400217b7          	lui	a5,0x40021
 a3c:	01080737          	lui	a4,0x1080
 a40:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
 a44:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.f09bf034+0x107dc9b>
 a48:	c398                	sw	a4,0(a5)
 a4a:	009f0737          	lui	a4,0x9f0
 a4e:	c798                	sw	a4,8(a5)
 a50:	40021737          	lui	a4,0x40021
 a54:	431c                	lw	a5,0(a4)
 a56:	00679693          	slli	a3,a5,0x6
 a5a:	fe06dde3          	bgez	a3,a54 <SystemInit+0x24>
 a5e:	435c                	lw	a5,4(a4)
 a60:	400216b7          	lui	a3,0x40021
 a64:	9bf1                	andi	a5,a5,-4
 a66:	0027e793          	ori	a5,a5,2
 a6a:	c35c                	sw	a5,4(a4)
 a6c:	4721                	li	a4,8
 a6e:	42dc                	lw	a5,4(a3)
 a70:	8bb1                	andi	a5,a5,12
 a72:	fee79ee3          	bne	a5,a4,a6e <SystemInit+0x3e>
 a76:	e00007b7          	lui	a5,0xe0000
 a7a:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
 a7e:	0007a023          	sw	zero,0(a5)
 a82:	e00007b7          	lui	a5,0xe0000
 a86:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 a8a:	08000713          	li	a4,128
 a8e:	c398                	sw	a4,0(a5)
 a90:	8082                	ret

00000a92 <main>:
}


int main() 
{
 a92:	1121                	addi	sp,sp,-24
 a94:	ca06                	sw	ra,20(sp)
 a96:	c822                	sw	s0,16(sp)
 a98:	c626                	sw	s1,12(sp)
	SystemInit();
 a9a:	3f59                	jal	a30 <SystemInit>
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
 a9c:	400217b7          	lui	a5,0x40021
 aa0:	4b98                	lw	a4,16(a5)
 aa2:	00200637          	lui	a2,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
 aa6:	ffe006b7          	lui	a3,0xffe00
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
 aaa:	8f51                	or	a4,a4,a2
 aac:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
 aae:	4b98                	lw	a4,16(a5)
 ab0:	16fd                	addi	a3,a3,-1 # ffdfffff <_eusrstack+0xdfdff7ff>
 ab2:	8f75                	and	a4,a4,a3
 ab4:	cb98                	sw	a4,16(a5)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
 ab6:	4fd8                	lw	a4,28(a5)
	AFIO->PCFR1 &= ~(0x04400002);
 ab8:	fbc006b7          	lui	a3,0xfbc00
 abc:	16f5                	addi	a3,a3,-3 # fbbffffd <_eusrstack+0xdbbff7fd>
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
 abe:	8f51                	or	a4,a4,a2
 ac0:	cfd8                	sw	a4,28(a5)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
 ac2:	4f98                	lw	a4,24(a5)
 ac4:	01176713          	ori	a4,a4,17
 ac8:	cf98                	sw	a4,24(a5)
	AFIO->PCFR1 &= ~(0x04400002);
 aca:	400107b7          	lui	a5,0x40010
 ace:	43d8                	lw	a4,4(a5)
 ad0:	8f75                	and	a4,a4,a3
 ad2:	c3d8                	sw	a4,4(a5)
	AFIO->PCFR1 |= I2C_AFIO_REG;
 ad4:	43d8                	lw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
 ad6:	76fd                	lui	a3,0xfffff
 ad8:	0ff68693          	addi	a3,a3,255 # fffff0ff <_eusrstack+0xdfffe8ff>
	AFIO->PCFR1 |= I2C_AFIO_REG;
 adc:	c3d8                	sw	a4,4(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
 ade:	400117b7          	lui	a5,0x40011
 ae2:	4398                	lw	a4,0(a5)
 ae4:	f0f77713          	andi	a4,a4,-241
 ae8:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
 aea:	4398                	lw	a4,0(a5)
 aec:	0d076713          	ori	a4,a4,208
 af0:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
 af2:	4398                	lw	a4,0(a5)
 af4:	8f75                	and	a4,a4,a3
 af6:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
 af8:	4398                	lw	a4,0(a5)
 afa:	6685                	lui	a3,0x1
 afc:	d0068693          	addi	a3,a3,-768 # d00 <main+0x26e>
 b00:	8f55                	or	a4,a4,a3
 b02:	c398                	sw	a4,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
 b04:	400057b7          	lui	a5,0x40005
 b08:	4047d703          	lhu	a4,1028(a5) # 40005404 <_eusrstack+0x20004c04>
 b0c:	66c1                	lui	a3,0x10
 b0e:	fc068693          	addi	a3,a3,-64 # ffc0 <lib_i2c.c.f09bf034+0xdbda>
 b12:	8f75                	and	a4,a4,a3
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
 b14:	03076713          	ori	a4,a4,48
	I2C1->CTLR2 = i2c_conf;
 b18:	40e79223          	sh	a4,1028(a5)
	I2C1->CKCFGR = i2c_conf;
 b1c:	7761                	lui	a4,0xffff8
 b1e:	02870713          	addi	a4,a4,40 # ffff8028 <_eusrstack+0xdfff7828>
 b22:	40e79e23          	sh	a4,1052(a5)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
 b26:	4007d703          	lhu	a4,1024(a5)
 b2a:	00176713          	ori	a4,a4,1
 b2e:	40e79023          	sh	a4,1024(a5)
	if(I2C1->STAR1 & I2C_STAR1_BERR) 
 b32:	4147d703          	lhu	a4,1044(a5)
 b36:	10077713          	andi	a4,a4,256
 b3a:	cf19                	beqz	a4,b58 <main+0xc6>
		I2C1->STAR1 &= ~(I2C_STAR1_BERR); 
 b3c:	4147d703          	lhu	a4,1044(a5)
 b40:	66c1                	lui	a3,0x10
 b42:	eff68693          	addi	a3,a3,-257 # feff <lib_i2c.c.f09bf034+0xdb19>
 b46:	8f75                	and	a4,a4,a3
	// Initialise the I2C Interface on the selected pins, at the specified Hz.
	// Enter a clock speed in Hz (Weirdness happens below 10,000), or use one
	// of the pre-defined clock speeds:
	// I2C_CLK_10KHZ    I2C_CLK_50KHZ    I2C_CLK_100KHZ    I2C_CLK_400KHZ
	// I2C_CLK_500KHZ   I2C_CLK_600KHZ   I2C_CLK_750KHZ    I2C_CLK_1MHZ
	if(i2c_init(I2C_CLK_400KHZ) != I2C_OK) printf("Failed to init the I2C Bus\n");
 b48:	6505                	lui	a0,0x1
 b4a:	40078793          	addi	a5,a5,1024
 b4e:	d4450513          	addi	a0,a0,-700 # d44 <main+0x2b2>
 b52:	00e79a23          	sh	a4,20(a5)
 b56:	357d                	jal	a04 <puts>

	// Scan the I2C Bus, prints any devices that respond
	printf("----Scanning I2C Bus for Devices---\n");
 b58:	6505                	lui	a0,0x1
 b5a:	d6050513          	addi	a0,a0,-672 # d60 <main+0x2ce>
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 b5e:	40005437          	lui	s0,0x40005
 b62:	354d                	jal	a04 <puts>
 b64:	4481                	li	s1,0
 b66:	40040413          	addi	s0,s0,1024 # 40005400 <_eusrstack+0x20004c00>
	int32_t timeout = I2C_TIMEOUT;
 b6a:	7d000713          	li	a4,2000
	i2c_err_t i2c_ret = I2C_OK;
 b6e:	4781                	li	a5,0
 b70:	a029                	j	b7a <main+0xe8>
		if(--timeout < 0) i2c_ret = I2C_ERR_BUSY;
 b72:	177d                	addi	a4,a4,-1
 b74:	00075363          	bgez	a4,b7a <main+0xe8>
 b78:	4795                	li	a5,5
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
 b7a:	01845683          	lhu	a3,24(s0)
 b7e:	8a89                	andi	a3,a3,2
 b80:	faed                	bnez	a3,b72 <main+0xe0>
	if(i2c_ret == I2C_OK)
 b82:	ebad                	bnez	a5,bf4 <main+0x162>
		I2C1->CTLR1 |= I2C_CTLR1_START;
 b84:	00045703          	lhu	a4,0(s0)
	return (status & status_mask) == status_mask; 
 b88:	000306b7          	lui	a3,0x30
 b8c:	0685                	addi	a3,a3,1 # 30001 <lib_i2c.c.f09bf034+0x2dc1b>
		I2C1->CTLR1 |= I2C_CTLR1_START;
 b8e:	10076713          	ori	a4,a4,256
 b92:	00e41023          	sh	a4,0(s0)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 b96:	01445603          	lhu	a2,20(s0)
 b9a:	01845703          	lhu	a4,24(s0)
 b9e:	0742                	slli	a4,a4,0x10
 ba0:	8f51                	or	a4,a4,a2
	return (status & status_mask) == status_mask; 
 ba2:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
 ba4:	fed719e3          	bne	a4,a3,b96 <main+0x104>
		I2C1->DATAR = (addr << 1) & 0xFE;
 ba8:	00149713          	slli	a4,s1,0x1
 bac:	0742                	slli	a4,a4,0x10
 bae:	8341                	srli	a4,a4,0x10
	return (status & status_mask) == status_mask; 
 bb0:	000706b7          	lui	a3,0x70
		I2C1->DATAR = (addr << 1) & 0xFE;
 bb4:	00e41823          	sh	a4,16(s0)
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 bb8:	7d100613          	li	a2,2001
	return (status & status_mask) == status_mask; 
 bbc:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.f09bf034+0x6dc9c>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
 bc0:	01445583          	lhu	a1,20(s0)
 bc4:	01845703          	lhu	a4,24(s0)
 bc8:	0742                	slli	a4,a4,0x10
 bca:	8f4d                	or	a4,a4,a1
	return (status & status_mask) == status_mask; 
 bcc:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 bce:	02d70363          	beq	a4,a3,bf4 <main+0x162>
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
 bd2:	167d                	addi	a2,a2,-1 # 1fffff <lib_i2c.c.f09bf034+0x1fdc19>
 bd4:	f675                	bnez	a2,bc0 <main+0x12e>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
 bd6:	01445783          	lhu	a5,20(s0)
 bda:	1007f793          	andi	a5,a5,256
 bde:	0c078963          	beqz	a5,cb0 <main+0x21e>
 be2:	01445783          	lhu	a5,20(s0)
 be6:	6741                	lui	a4,0x10
 be8:	eff70713          	addi	a4,a4,-257 # feff <lib_i2c.c.f09bf034+0xdb19>
 bec:	8ff9                	and	a5,a5,a4
 bee:	00f41a23          	sh	a5,20(s0)
	i2c_err_t i2c_err = i2c_error();
 bf2:	4785                	li	a5,1
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
 bf4:	00045703          	lhu	a4,0(s0)
 bf8:	20076713          	ori	a4,a4,512
 bfc:	00e41023          	sh	a4,0(s0)
		if(i2c_ping(addr) == I2C_OK) callback(addr);
 c00:	e781                	bnez	a5,c08 <main+0x176>
 c02:	0ff4f513          	zext.b	a0,s1
 c06:	33d9                	jal	9cc <i2c_scan_callback>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
 c08:	0485                	addi	s1,s1,1
 c0a:	07f00793          	li	a5,127
 c0e:	f4f49ee3          	bne	s1,a5,b6a <main+0xd8>
	i2c_scan(i2c_scan_callback);
	printf("----Done Scanning----\n\n");
 c12:	6505                	lui	a0,0x1
 c14:	d8450513          	addi	a0,a0,-636 # d84 <main+0x2f2>
 c18:	33f5                	jal	a04 <puts>
	// This example is specifically for the DS3231 I2C RTC Module.
	// Use this as an example for generic devices, changing Address, speed etc
	i2c_err_t i2c_stat;

	// Write to the -Seconds- Register (Reg 0x00, 0x00 Seconds, one byte)
	i2c_stat = i2c_write(I2C_ADDR, 0x00, (uint8_t[]){0x00}, 1);
 c1a:	4585                	li	a1,1
 c1c:	850a                	mv	a0,sp
 c1e:	00010023          	sb	zero,0(sp)
 c22:	e5aff0ef          	jal	27c <i2c_write.constprop.0>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 c26:	0e051463          	bnez	a0,d0e <main+0x27c>

	// Example of writing an array to a register.
	uint8_t array[3] = {0x00, 0x01, 0x02};
 c2a:	10000793          	li	a5,256
 c2e:	00f11423          	sh	a5,8(sp)
	i2c_stat = i2c_write(I2C_ADDR, 0x00, array, 3);
 c32:	458d                	li	a1,3
	uint8_t array[3] = {0x00, 0x01, 0x02};
 c34:	4789                	li	a5,2
	i2c_stat = i2c_write(I2C_ADDR, 0x00, array, 3);
 c36:	0028                	addi	a0,sp,8
	uint8_t array[3] = {0x00, 0x01, 0x02};
 c38:	00f10523          	sb	a5,10(sp)
	i2c_stat = i2c_write(I2C_ADDR, 0x00, array, 3);
 c3c:	e40ff0ef          	jal	27c <i2c_write.constprop.0>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 c40:	e579                	bnez	a0,d0e <main+0x27c>

	// Example to read from the I2C Device
	uint8_t seconds = 0;    // Just Seconds (Read as Hex instead od Decimal)
 c42:	000101a3          	sb	zero,3(sp)
	uint8_t time[3] = {0};  // Time in Sec, Min, Hrs (Hex not Decimal)
 c46:	00011223          	sh	zero,4(sp)
 c4a:	00010323          	sb	zero,6(sp)
	// Loop forever
	while(1)
	{
		// Example reading just one byte
		i2c_stat = i2c_read(I2C_ADDR, 0x00, &seconds, 1);
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c4e:	6405                	lui	s0,0x1
		i2c_stat = i2c_read(I2C_ADDR, 0x00, &seconds, 1);
 c50:	4585                	li	a1,1
 c52:	00310513          	addi	a0,sp,3
 c56:	80dff0ef          	jal	462 <i2c_read.constprop.0>
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c5a:	c501                	beqz	a0,c62 <main+0x1d0>
 c5c:	d9c40513          	addi	a0,s0,-612 # d9c <main+0x30a>
 c60:	3355                	jal	a04 <puts>
		// Print Seconds as a single hex byte
		printf("Seconds: %02X\n", seconds);
 c62:	00314583          	lbu	a1,3(sp)
 c66:	6505                	lui	a0,0x1
 c68:	db450513          	addi	a0,a0,-588 # db4 <main+0x322>
 c6c:	3b2d                	jal	9a6 <printf>

		
		// Example reading multiple bytes
		i2c_stat = i2c_read(I2C_ADDR, 0x00, time, 3);
 c6e:	458d                	li	a1,3
 c70:	0048                	addi	a0,sp,4
 c72:	ff0ff0ef          	jal	462 <i2c_read.constprop.0>
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c76:	c501                	beqz	a0,c7e <main+0x1ec>
 c78:	d9c40513          	addi	a0,s0,-612
 c7c:	3361                	jal	a04 <puts>
		// Print Time as Hrs Min Sec
		printf("Time: %02X:%02X:%02X\n\n", time[2], time[1], time[0]);
 c7e:	00414683          	lbu	a3,4(sp)
 c82:	00514603          	lbu	a2,5(sp)
 c86:	00614583          	lbu	a1,6(sp)
 c8a:	6505                	lui	a0,0x1
 c8c:	dc450513          	addi	a0,a0,-572 # dc4 <main+0x332>
 c90:	3b19                	jal	9a6 <printf>
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 c92:	e000f7b7          	lui	a5,0xe000f
 c96:	4798                	lw	a4,8(a5)
 c98:	005b97b7          	lui	a5,0x5b9
 c9c:	d8078793          	addi	a5,a5,-640 # 5b8d80 <lib_i2c.c.f09bf034+0x5b699a>
 ca0:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 ca2:	e000f6b7          	lui	a3,0xe000f
 ca6:	469c                	lw	a5,8(a3)
 ca8:	8f99                	sub	a5,a5,a4
 caa:	fe07cee3          	bltz	a5,ca6 <main+0x214>
 cae:	b74d                	j	c50 <main+0x1be>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
 cb0:	01445783          	lhu	a5,20(s0)
 cb4:	4007f793          	andi	a5,a5,1024
 cb8:	cb99                	beqz	a5,cce <main+0x23c>
 cba:	01445783          	lhu	a5,20(s0)
 cbe:	6741                	lui	a4,0x10
 cc0:	bff70713          	addi	a4,a4,-1025 # fbff <lib_i2c.c.f09bf034+0xd819>
 cc4:	8ff9                	and	a5,a5,a4
 cc6:	00f41a23          	sh	a5,20(s0)
	i2c_err_t i2c_err = i2c_error();
 cca:	4789                	li	a5,2
 ccc:	b725                	j	bf4 <main+0x162>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
 cce:	01445783          	lhu	a5,20(s0)
 cd2:	2007f793          	andi	a5,a5,512
 cd6:	cb99                	beqz	a5,cec <main+0x25a>
 cd8:	01445783          	lhu	a5,20(s0)
 cdc:	6741                	lui	a4,0x10
 cde:	dff70713          	addi	a4,a4,-513 # fdff <lib_i2c.c.f09bf034+0xda19>
 ce2:	8ff9                	and	a5,a5,a4
 ce4:	00f41a23          	sh	a5,20(s0)
	i2c_err_t i2c_err = i2c_error();
 ce8:	478d                	li	a5,3
 cea:	b729                	j	bf4 <main+0x162>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 cec:	01445703          	lhu	a4,20(s0)
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
 cf0:	4795                	li	a5,5
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
 cf2:	01471693          	slli	a3,a4,0x14
 cf6:	ee06dfe3          	bgez	a3,bf4 <main+0x162>
 cfa:	01445783          	lhu	a5,20(s0)
 cfe:	777d                	lui	a4,0xfffff
 d00:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_eusrstack+0xdfffefff>
 d04:	8ff9                	and	a5,a5,a4
 d06:	00f41a23          	sh	a5,20(s0)
	i2c_err_t i2c_err = i2c_error();
 d0a:	4791                	li	a5,4
 d0c:	b5e5                	j	bf4 <main+0x162>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 d0e:	6505                	lui	a0,0x1
 d10:	d9c50513          	addi	a0,a0,-612 # d9c <main+0x30a>
 d14:	39c5                	jal	a04 <puts>
		// Wait 1 Second
		Delay_Ms(1000);
	}

	return 0;
}
 d16:	40d2                	lw	ra,20(sp)
 d18:	4442                	lw	s0,16(sp)
 d1a:	44b2                	lw	s1,12(sp)
 d1c:	557d                	li	a0,-1
 d1e:	0161                	addi	sp,sp,24
 d20:	8082                	ret
 d22:	0000                	unimp
 d24:	6441                	lui	s0,0x10
 d26:	7264                	.insn	2, 0x7264
 d28:	7365                	lui	t1,0xffff9
 d2a:	30203a73          	csrrc	s4,medeleg,zero
 d2e:	2578                	.insn	2, 0x2578
 d30:	3230                	.insn	2, 0x3230
 d32:	2058                	.insn	2, 0x2058
 d34:	6552                	.insn	2, 0x6552
 d36:	6e6f7073          	csrci	0x6e6,30
 d3a:	6564                	.insn	2, 0x6564
 d3c:	2e64                	.insn	2, 0x2e64
 d3e:	000a                	c.slli	zero,0x2
 d40:	000a                	c.slli	zero,0x2
 d42:	0000                	unimp
 d44:	6146                	.insn	2, 0x6146
 d46:	6c69                	lui	s8,0x1a
 d48:	6465                	lui	s0,0x19
 d4a:	7420                	.insn	2, 0x7420
 d4c:	6e69206f          	j	93432 <lib_i2c.c.f09bf034+0x9104c>
 d50:	7469                	lui	s0,0xffffa
 d52:	7420                	.insn	2, 0x7420
 d54:	6568                	.insn	2, 0x6568
 d56:	4920                	lw	s0,80(a0)
 d58:	4332                	lw	t1,12(sp)
 d5a:	4220                	lw	s0,64(a2)
 d5c:	7375                	lui	t1,0xffffd
 d5e:	0000                	unimp
 d60:	2d2d                	jal	139a <_data_lma+0x5be>
 d62:	2d2d                	jal	139c <_data_lma+0x5c0>
 d64:	6e616353          	.insn	4, 0x6e616353
 d68:	696e                	.insn	2, 0x696e
 d6a:	676e                	.insn	2, 0x676e
 d6c:	4920                	lw	s0,80(a0)
 d6e:	4332                	lw	t1,12(sp)
 d70:	4220                	lw	s0,64(a2)
 d72:	7375                	lui	t1,0xffffd
 d74:	6620                	.insn	2, 0x6620
 d76:	4420726f          	jal	tp,81b8 <lib_i2c.c.f09bf034+0x5dd2>
 d7a:	7665                	lui	a2,0xffff9
 d7c:	6369                	lui	t1,0x1a
 d7e:	7365                	lui	t1,0xffff9
 d80:	2d2d                	jal	13ba <ch32v003fun.c.75419276+0x15>
 d82:	002d                	c.nop	11
 d84:	2d2d                	jal	13be <ch32v003fun.c.75419276+0x19>
 d86:	2d2d                	jal	13c0 <ch32v003fun.c.75419276+0x1b>
 d88:	6f44                	.insn	2, 0x6f44
 d8a:	656e                	.insn	2, 0x656e
 d8c:	5320                	lw	s0,96(a4)
 d8e:	6e6e6163          	bltu	t3,t1,1470 <ch32v003fun.c.75419276+0xcb>
 d92:	6e69                	lui	t3,0x1a
 d94:	2d2d2d67          	.insn	4, 0x2d2d2d67
 d98:	0a2d                	addi	s4,s4,11
 d9a:	0000                	unimp
 d9c:	7245                	lui	tp,0xffff1
 d9e:	6f72                	.insn	2, 0x6f72
 da0:	2072                	.insn	2, 0x2072
 da2:	7355                	lui	t1,0xffff5
 da4:	6e69                	lui	t3,0x1a
 da6:	68742067          	.insn	4, 0x68742067
 daa:	2065                	jal	e52 <_data_lma+0x76>
 dac:	3249                	jal	72e <_write.constprop.0+0xd4>
 dae:	75422043          	.insn	4, 0x75422043
 db2:	65530073          	.insn	4, 0x65530073
 db6:	646e6f63          	bltu	t3,t1,1414 <ch32v003fun.c.75419276+0x6f>
 dba:	25203a73          	csrrc	s4,0x252,zero
 dbe:	3230                	.insn	2, 0x3230
 dc0:	0a58                	addi	a4,sp,276
 dc2:	0000                	unimp
 dc4:	6954                	.insn	2, 0x6954
 dc6:	656d                	lui	a0,0x1b
 dc8:	203a                	.insn	2, 0x203a
 dca:	3025                	jal	5f2 <i2c_read.constprop.0+0x190>
 dcc:	5832                	lw	a6,44(sp)
 dce:	253a                	.insn	2, 0x253a
 dd0:	3230                	.insn	2, 0x3230
 dd2:	3a58                	.insn	2, 0x3a58
 dd4:	3025                	jal	5fc <i2c_read.constprop.0+0x19a>
 dd6:	5832                	lw	a6,44(sp)
 dd8:	0a0a                	slli	s4,s4,0x2
	...
