Baud is generated by HCLK/(16 * USARTDIV)
USARTDIV is determined by DIV_M and DIV_F -> USART_BRR

Sync mode is enabled by using 
USARTx_CTLR2-> CLKEN 1
USARTx_CTLR3-> SCEN & HDSEL & IREM 0

USART_STATR - Status register
USART_DATAR - Data register
USART_BRR   - Baudrate register
USART_CTLR1 - Control register 1
USART_CTLR2 - Control register 2
USART_CTLR3 - Control register 3
USART_GPR   - Guard & Prescaler register

----
STATR is for general status 
TXE to detect when tx data is in the shift register
TC to detect when transmit is complete

RXNE to detect when data has been read into the data reg (todo set rxne interupt)

----
DATAR
8 bit data register- RDR and TDR to start (?)

----
BRR
Mantissa and Fraction portion
12b mantissa
4b fraction

----
CTRL 1
UE Enable USART (1)
M Word Length, 1-9bit 0-8bit
WAKE wake select bit. 1 Address marker 0 bus idle
PCE Parity enable
PS Parity Select 1-odd 0-even
PEIE Parity Interrupt en
TXEIE tx interrupt en
TCIE Transmit complete interrpt
RXNEIE RXNE interrupt enable
IDLEIE Idle interrupt enable
TE Transmit enable
RE Receiver Enable
RWU Receiver wakeup, 1: silent mode 0: normal mode
SBK Send Break Bit

----
CTLR 2
LINEN LIN Enable
STOP[2]  00 1 stop bit
CLKEN  Sync mode clk enable
CPOL Polarity for clk
CPHA phase for clk
LBCL Last bit clock pulse
resv
LBDIE LIN Break interrupt enable
LBDL LIN Break detection length
resv
ADD[4] USART Node Addresss

----
CTLR 3
[31:11] resv
CTSIE CTS interrupt enable
CTSE CTS Enable
RTSE RTS Enable
DMAT DMA transmit enable bit
DMAR DMA receive enable bit
SCEN Smartcard Enable
NACK Smartcard NACK Enable
HDSEL Half-Duplex select 1:half duplex 0:full duplex
IRLP IrDA Low Power enable
IREN IrDA Enable
EIE Error interrupt enable


reverse engineer:
	(APB2PCENR)    Enable GPIOD and USART CLK
	(GPIOD)        Set D5 to 10MHz PP

	(USART_CTLR1) 8bit length, no parity, :: mode tx?? ::
	(USART_CTLR2) stop bits 1
	(USART_CTLR3) 0x0000

	(USART_BRR) ??  
		#define FUNCONF_SYSTEM_CORE_CLOCK 48000000
		#define UART_BAUD_RATE 115200
		#define UART_BRR (((FUNCONF_SYSTEM_CORE_CLOCK) + (UART_BAUD_RATE)/2) / (UART_BAUD_RATE))
	
	(USART_CTLR1) UE 1

	-- Wait for things to finish and be ready
	while( !(USART1->STATR & USART_FLAG_TC));
	USART1->DATAR = *buf++;




